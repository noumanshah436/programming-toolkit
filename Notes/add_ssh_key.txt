1) SSH and GPG keys


2) Generating a new SSH key and adding it to the ssh-agent

3)

ssh-keygen -t ed25519 -C "nouman.rehman@devsinc.com"


4) eval "$(ssh-agent -s)"

5) ssh-add ~/.ssh/id_ed25519


6 )   Adding a new SSH key to your GitHub account
 https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account

 cat ~/.ssh/id_ed25519.pub



*****************************



1) cd .ssh

2) ssh-keygen -t ed25519 -C "nouman.rehman@devsinc.com"
Generating public/private ed25519 key pair.
Enter file in which to save the key (/home/dev/.ssh/id_ed25519): abc
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in abc
Your public key has been saved in abc.pub
The key fingerprint is:
SHA256:w6jHs3+HUqQz1v2ZfkbIIQX1oNaPPWBThVd+zWDjYD0 nouman.rehman@devsinc.com
The key's randomart image is:
+--[ED25519 256]--+
|            ++*o=|
|           . *EBo|
|            o=oo*|
|       o  ..o ++.|
|      . S+ . o.+o|
|     o  =.o . o o|
|    . +. + . . + |
|     . o. o . + o|
|      ...o . ..o |
+----[SHA256]-----+

3) dev@syed-nouman:~/.ssh$ ls
abc  abc.pub  id_ed25519  id_ed25519.pub  known_hosts

4) dev@syed-nouman:~/.ssh$ ssh-add ~/.ssh/abc
Identity added: /home/dev/.ssh/abc (nouman.rehman@devsinc.com)


5) dev@syed-nouman:~/.ssh$ cat abc.pub
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFBe0mRRzvGg2dhaexaqwfWCZml4DW+X1zzynZpgCiuw nouman.rehman@devsinc.com


************************

All commands:

cd .ssh
ssh-keygen -t ed25519 -C "noumanshah436@gmail.com"
ls
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519
ls
cat ~/.ssh/id_ed25519.pub

************************

All commands:

cd .ssh
ssh-keygen -t ed25519 -C "nouman.rehman@devsinc.com"
ls
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519
ls
cat ~/.ssh/id_ed25519.pub


************************

what is ssh:

SSH (Secure Shell) for GitHub is a secure and convenient way to interact with GitHub repositories using the Git version control system. It involves generating an SSH key pair on your local machine and adding the public key to your GitHub account. Once set up, you can use the SSH protocol to authenticate and securely communicate with GitHub, making it easier to push and pull code from your repositories without the need to enter your GitHub username and password each time.

Here's how SSH for GitHub works:

Generate SSH Key Pair:
On your local machine (computer), you generate an SSH key pair, which consists of two parts: a private key (usually stored in ~/.ssh/id_rsa) and a public key (usually stored in ~/.ssh/id_rsa.pub).

Add Public Key to GitHub:
You add the public key (the contents of id_rsa.pub) to your GitHub account settings. This step associates your public key with your GitHub account, allowing GitHub to recognize and trust your SSH key for authentication.

Using SSH to Interact with GitHub:
Once your SSH key is set up and associated with your GitHub account, you can use SSH URLs when cloning or interacting with repositories. For example:


git clone git@github.com:username/repository.git
Instead of using HTTPS URLs that require username and password for every interaction, SSH URLs use your SSH key for authentication, providing a more seamless and secure experience.

Using SSH for GitHub offers several advantages:

Security: SSH uses cryptographic protocols to establish a secure connection between your computer and GitHub, protecting your data and preventing eavesdropping.

Convenience: Once set up, you don't need to enter your GitHub username and password for each interaction, making it more convenient to work with your repositories.

Authentication: Your private SSH key acts as a unique identifier for you, providing a secure way to authenticate yourself to GitHub.

To set up SSH for GitHub, you can follow GitHub's official documentation, which provides step-by-step instructions for different operating systems: https://docs.github.com/en/authentication/connecting-to-github-with-ssh








